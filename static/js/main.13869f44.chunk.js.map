{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","item","handleUpdate","bind","handleRemove","handleChange","handleToggle","toggleForm","this","removeTodo","id","evt","preventDefault","updateTodo","setState","target","name","value","toggleCompleted","result","className","onSubmit","type","onChange","completed","onClick","Component","NewTodoForm","handleSubmit","newTodo","uuid","createTodo","htmlFor","placeholder","TodoList","todoArr","toggleComplete","filter","todo","newItem","map","key","renderTodo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13869f44.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Todo.css'\r\n//import { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isEditing: false,\r\n      task: this.props.item\r\n    }\r\n    this.handleUpdate = this.handleUpdate.bind(this)\r\n    this.handleRemove = this.handleRemove.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleToggle = this.handleToggle.bind(this)\r\n    this.toggleForm = this.toggleForm.bind(this)\r\n  }\r\n\r\n  handleRemove() {\r\n    this.props.removeTodo(this.props.id)\r\n  }\r\n\r\n  handleUpdate(evt) {\r\n    evt.preventDefault()\r\n    this.props.updateTodo(this.props.id, this.state.task)\r\n    this.setState({\r\n      isEditing: false\r\n    })\r\n  }\r\n\r\n  toggleForm() {\r\n    this.setState({\r\n      isEditing: !this.state.isEditing\r\n    })\r\n  }\r\n\r\n  handleChange(evt) {\r\n    this.setState(\r\n      {[evt.target.name]:evt.target.value}\r\n    )\r\n  }\r\n\r\n  handleToggle(evt) {\r\n    this.props.toggleCompleted(this.props.id)\r\n  }\r\n\r\n  render() {\r\n    let result\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <div className=\"Todo\">\r\n          <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\r\n            <input \r\n              type=\"text\"\r\n              value={this.state.task}\r\n              name=\"task\"\r\n              onChange={this.handleChange}>\r\n            </input>\r\n            <button>Save!</button>\r\n          </form>\r\n        </div>\r\n      )\r\n    } else {\r\n      result = (\r\n        <div className=\"Todo\">\r\n          <li \r\n            className={ this.props.completed? \"Todo-task completed\" : \"Todo-task\"}\r\n            onClick={this.handleToggle}\r\n          >\r\n            {this.props.item}\r\n          </li>\r\n          <div className=\"Todo-buttons\">\r\n            <button onClick={this.toggleForm}><i className='fas fa-pen' /></button>\r\n            <button onClick={this.handleRemove}><i className='fas fa-trash' /></button>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div>{result}</div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default Todo","import React, { Component } from 'react'\r\nimport uuid from \"uuid/v4\";\r\nimport './NewTodoForm.css'\r\n\r\n\r\nclass NewTodoForm extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n       item : \"\",\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n  \r\n  handleChange(evt) {\r\n    this.setState(\r\n      {[evt.target.name]:evt.target.value}\r\n    )\r\n  }\r\n\r\n  handleSubmit(evt) {\r\n    evt.preventDefault()\r\n    const newTodo = {...this.state, id: uuid(), completed: false}\r\n    this.props.createTodo(newTodo)\r\n    this.setState({\r\n      item : \"\",\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n        <label htmlFor=\"item\">New Todo</label>\r\n        <input \r\n        type=\"text\" \r\n        name=\"item\"\r\n        placeholder=\"new todo\"\r\n        value={this.state.item}\r\n        onChange={this.handleChange}\r\n        id=\"todoItem\"\r\n        />\r\n        <button>Add Todo!</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NewTodoForm","import React, { Component } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport './TodoList.css'\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      todoArr: []\r\n    };\r\n    this.createTodo = this.createTodo.bind(this);\r\n    this.removeTodo = this.removeTodo.bind(this);\r\n    this.updateTodo = this.updateTodo.bind(this);\r\n    this.toggleComplete = this.toggleComplete.bind(this);\r\n  }\r\n\r\n  removeTodo(id) {\r\n    this.setState({\r\n      todoArr: this.state.todoArr.filter(todo => todo.id !== id)\r\n    });\r\n  }\r\n\r\n  createTodo(newTodo) {\r\n    this.setState({\r\n      todoArr: [...this.state.todoArr, newTodo]\r\n    });\r\n  }\r\n\r\n  updateTodo(id,newItem) {\r\n    const newTodo = this.state.todoArr.map(item => {\r\n      if(item.id === id) {\r\n        return { ...item, item: newItem }\r\n      } else {\r\n        return item\r\n      }\r\n    })\r\n    this.setState({\r\n      todoArr: newTodo\r\n    });\r\n  }\r\n\r\n  toggleComplete(id) {\r\n    const newTodo = this.state.todoArr.map(item => {\r\n      if(item.id === id) {\r\n        return { ...item, completed: !item.completed }\r\n      } else {\r\n        return item\r\n      }\r\n    })\r\n    this.setState({\r\n      todoArr: newTodo\r\n    });\r\n  }\r\n\r\n  renderTodo() {\r\n    return (\r\n      this.state.todoArr.map(todo => (\r\n      <ul>\r\n        <Todo\r\n          key={todo.id}\r\n          id={todo.id}\r\n          item={todo.item}\r\n          completed={todo.completed}\r\n          removeTodo={this.removeTodo}\r\n          updateTodo={this.updateTodo}\r\n          toggleCompleted={this.toggleComplete}\r\n        />\r\n      </ul>\r\n    )))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='TodoList'>\r\n        <h1>\r\n          React Todo List<span>A Simple React Todo App.</span>\r\n        </h1>\r\n        {this.renderTodo()}\r\n        <NewTodoForm createTodo={this.createTodo} updateTodo/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport TodoList from './TodoList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}